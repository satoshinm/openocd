stages:
  - build
  - test
  - deploy

before_script:
  # add gitlab ssh key (on Linux only)
  - >
    test $(uname -s) != "Darwin" &&
    echo "Setting up Gitlab SSH key" &&
    mkdir -p ~/.ssh &&
    chmod 700 ~/.ssh &&
    echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64 &&
    base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa &&
    chmod 600 ~/.ssh/id_rsa &&
    echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  # reconfigure submodules
  - git config submodule.tools/git2cl.url $GITLAB_SSH_SERVER/idf/git2cl.git
  - git config submodule.jimtcl.url $GITLAB_SSH_SERVER/idf/jimtcl.git
  - git config submodule.src/jtag/drivers/libjaylink.url $GITLAB_SSH_SERVER/idf/libjaylink.git
  # Gitlab doesn't clean submodule contents
  - (cd tools/git2cl && git clean -fxd) || true
  - (cd jimtcl && git clean -fxd) || true
  - (cd src/jtag/drivers/libjaylink && git clean -fxd) || true
  # remove Github remote, if configured
  - git remote rm github || true
  # OpenOCD configuration options
  - "export OPENOCD_CONFIGURE_OPTS=\"
        --disable-doxygen-html
        --disable-doxygen-pdf
        --enable-ftdi
        --enable-jlink
        --enable-ulink
    \""

build_linux:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  tags:
    - build

  artifacts:
    paths:
      - dist
    expire_in: 2 weeks

  script:
    - git submodule update --init
    - ./bootstrap
    - ./configure --prefix=$PWD/openocd-esp32 $OPENOCD_CONFIGURE_OPTS
    - make -j `nproc`
    - make install-strip
    - export REL_NAME=openocd-esp32-linux64-`git describe --always`
    - tar czvf $REL_NAME.tar.gz openocd-esp32/
    - mkdir -p dist
    - mv $REL_NAME.tar.gz dist/


build_windows:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  tags:
    - build

  artifacts:
    paths:
      - dist
    expire_in: 2 weeks

  variables:
    GIT_STRATEGY: fetch

  script:
    # Build libusb-1.0
    - export LIBUSB_VER=libusb-1.0.21
    - wget https://dl.espressif.com/dl/$LIBUSB_VER.tar.gz -O $LIBUSB_VER.tar.gz
    - tar xzf $LIBUSB_VER.tar.gz && rm $LIBUSB_VER.tar.gz
    - pushd $LIBUSB_VER
    - ./bootstrap.sh
    - ./configure --prefix=$PWD/dist  --host=i686-w64-mingw32 --enable-shared=no --enable-static=yes
    - make -j `nproc`
    - make install-strip
    - popd
    # Build OpenOCD
    - git submodule update --init
    - ./bootstrap
    - export LIBUSB1_CFLAGS=-I$PWD/$LIBUSB_VER/dist/include/libusb-1.0
    - export LIBUSB1_LIBS=-L$PWD/$LIBUSB_VER/dist/lib
    - ./configure --prefix=$PWD/openocd-esp32 --host=i686-w64-mingw32 $OPENOCD_CONFIGURE_OPTS
    - make -j `nproc`
    - make install-strip
    - cp /usr/i686-w64-mingw32/lib/libwinpthread-1.dll openocd-esp32/bin/
    - export REL_NAME=openocd-esp32-win32-`git describe --always`
    - zip -r $REL_NAME.zip openocd-esp32/
    - mkdir -p dist
    - mv $REL_NAME.zip dist/


build_macos:
  stage: build
  tags:
    - build_macos

  artifacts:
    paths:
      - dist
    expire_in: 2 weeks

  variables:
    GIT_STRATEGY: fetch

  script:
    # Build OpenOCD
    - git submodule update --init
    - make distclean || true
    - ./bootstrap
    - ./configure --prefix=$PWD/openocd-esp32 $OPENOCD_CONFIGURE_OPTS
    - make -j 4
    - make install-strip
    - export REL_NAME=openocd-esp32-macos-`git describe --always`
    - tar czvf $REL_NAME.tar.gz openocd-esp32/
    - mkdir -p dist
    - mv $REL_NAME.tar.gz dist/

push_master_to_github:
  stage: deploy
  only:
    - master
  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  before_script:
    - echo "not switching submodules to Gitlab"
    - git remote rm github || true
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/openocd-esp32.git
    - git push github HEAD:master

build_test_app:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  tags:
    - build

  artifacts:
    paths:
      - testing/esp/test_apps/gen_ut_app/output/default/gen_ut_app.elf
      - testing/esp/test_apps/gen_ut_app/output/default/gen_ut_app.bin
      - testing/esp/test_apps/gen_ut_app/output/default/partitions_singleapp.bin
      - testing/esp/test_apps/gen_ut_app/output/default/bootloader/bootloader.bin
      - testing/esp/test_apps/gen_ut_app/output/single_core/gen_ut_app.elf
      - testing/esp/test_apps/gen_ut_app/output/single_core/gen_ut_app.bin
      - testing/esp/test_apps/gen_ut_app/output/single_core/partitions_singleapp.bin
      - testing/esp/test_apps/gen_ut_app/output/single_core/bootloader/bootloader.bin
    expire_in: 2 weeks

  script:
      # Prepare ESP-IDF
      - rm -rf esp-idf
      - git clone $GITLAB_SSH_SERVER/idf/esp-idf.git
      - pushd esp-idf
      - tools/ci/mirror-submodule-update.sh
      - export IDF_PATH=$PWD
      - popd
      # Build generic test app
      - pushd testing/esp/test_apps/gen_ut_app
      - make ut-apply-config-default
      - make V=1 ut-build-default
      - make ut-apply-config-single_core
      - make V=1 ut-build-single_core
      - popd

run_autotests:
  stage: test
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  tags:
    - test_jtag

  artifacts:
    paths:
      - testing/esp/debug_backend_tests.log
    when: always
    expire_in: 1 week

  script:
      # Run tests
      - mkdir -p dist/tmp
      - pushd dist/tmp
      - tar xzvf ../openocd-esp32-linux64-*.tar.gz
      - export DIST_DIR=$PWD/openocd-esp32
      - popd
      - pushd testing/esp
      - ./run_tests.py -o $DIST_DIR/bin/openocd -s $DIST_DIR/share/openocd/scripts -a $PWD/test_apps -d 4 -l ./debug_backend_tests.log
      - popd
